q
Dir.methods
Dir
File.methods
File.cp
File.copy
q
content
q
content
q
content
q
c
content
q
content
q
test_object
test_description(test_object)
q
Dir.mkdir('build') if !Dir.exist?('build')
Dir.new('build') if !Dir.exist?('build')
Dir.exist? 'build'
File.new("build/temp.txt", "w")
File.new("temp.txt", "w")
q
layout.render{ content }
q
layout.render{ content }
q
layout.render()
layout.render(content)
layout.render{ content }
q
test_description(test_object).ke
test_description(test_object)
Slim::Template.new('lib/templates/layout.html.slim')
q
test['elements'][0]['steps']
test['elements'][0]['steps'].length
test['elements'][0]['steps'].class
test['elements'][0]['steps']
test['elements'][0].keys
test['elements'][0]['keyword']
test['elements'][0].keys
test['elements'][0]
test['elements'].class
test['elements']
test['elements'].length
test['elements'].class
test['elements']
test['keyword']
test['description']
test['uri']
test['name']
test[:name]
test[:keyword]
test[:uri]
test.keys
test.class
test
Slim::Template.new('lib/templates/test.html').render(Object.new, :foo => 'foo')
exit
File.new('build/some_file.txt', 'w')
File.open("build/some_file_name.txt", "w") { |file| file.puts "I wrote this with ruby!"}
Slim::Template.new('lib/templates/test.html').render(Object.new, :foo => 'foo')
Slim::Template.new('lib/templates/test.html').render(Object.new, :foo => foo)
Slim::Template.new('lib/templates/test.html').render({tests: 1, locals: 1})
Slim::Template.new('lib/templates/test.html').render({tests: 1, locals: 1 })
Slim::Template.new('lib/templates/test.html').render({tests: 1})
Slim::Template.new('lib/templates/test.html', { tests: '1' }).render()
Slim::Template.new('lib/templates/test.html', {tests: '1'}).render()
Slim::Template.new('lib/templates/test.html', {}).render()
test
q
CucumberTestReportViewer::Parser.parse('spec/fixtures/elk.json')
q
CucumberTestReportViewer::Parser.parse('spec/fixtures/elk.json')
exit
require 'slim'
renderer.result()
renderer = ERB.new(file.read)
weekday = '1'
file.read
file = File.open 'lib/templates/test.html'
renderer.result()
renderer.result(tests: '1')
renderer = ERB.new(file.read)
ERB
require 'erb'
eval(file.read)
tests = '11'
eval(file.read, tests: '1')
eval(file.read)
file.read
file = File.open 'lib/templates/test.html'
file.read
file.text
file.methods
file = File.open 'lib/templates/test.html'
`ls`
file = File.open 'templates/test.html'
file = File.open '/spec/templates/test.html'
file = File.open 'spec/templates/test.html'
file = File.open 'spec/templates/index.html'
test
exit
@json_tests[1]['elements'][3]
@json_tests[1]['elements'][2]
@json_tests[1]['elements'][1]
@json_tests[1]['elements'][0]
@json_tests[1]['elements'].length
@json_tests[1]['elements'].class
@json_tests[1]['elements']
@json_tests[1].elements
@json_tests[1].keys
@json_tests[1].class
@json_tests[1]
@json_tests[0].keys
@json_tests[0].class
@json_tests[0]
@json_tests
c
q
self.methods
self
exit
data.length
data.keys
data
q
require "json"
json
q
CucumberTestReportViewer::Parser.parse('spec/fixtures/elk.json')
`pwd`
`cwd`
root_path
path
CucumberTestReportViewer::Parser.parse('fixtures/elk.json')
CucumberTestReportViewer::Parser.parse('../fixtures/elk.json')
q
CucumberTestReportViewer::Parser.parse('fixtures/elk.json')
q
CucumberTestReportViewer::Parser.parse('fixtures/elk.json')
exit
reload!
CucumberTestReportViewer::Parser.parse('fixtures/elk.json')
c
CucumberTestReportViewer::Parser.parse
CucumberTestReportViewer::Parser.methods
q
CucumberTestReportViewer::Parser.methods
CucumberTestReportViewer::Parser
q
exit
CucumberTestReportViewer::Parser.fetch_file
CucumberTestReportViewer::Parser.parse
CucumberTestReportViewer::Parser
q
CucumberTestReportViewer::VERSION
CucumberTestReportViewer.methods
CucumberTestReportViewer
CucumberTestReportViewer::Parser
